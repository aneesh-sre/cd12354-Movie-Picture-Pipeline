name: Backend Continuous Deployment

on:
  push:
    branches: [ main, master ]
    paths:
      - 'starter/backend/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: backend
  EKS_CLUSTER_NAME: cluster

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: pipenv install --dev
        
      - name: Run linting
        run: pipenv run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: pipenv install --dev
        
      - name: Run tests
        run: pipenv run test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
        working-directory: starter/backend
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: pipenv install --dev
        working-directory: starter/backend
        
      - name: Run tests
        run: pipenv run test
        working-directory: starter/backend
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./starter/backend
          file: ./starter/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: ./starter/backend/k8s
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
          
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
      - name: Check AWS identity
        run: aws sts get-caller-identity
        
      - name: List EKS clusters
        run: aws eks list-clusters --region us-east-1
        
      - name: Describe EKS cluster
        run: aws eks describe-cluster --region us-east-1 --name cluster
        
      - name: Update kube config
        run: aws eks update-kubeconfig --region us-east-1 --name cluster
        
      - name: Test kubectl access
        run: kubectl get nodes
        
      - name: Set image tag
        run: |
          kustomize edit set image backend=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
      - name: Deploy to Kubernetes
        run: kustomize build | kubectl apply -f - --validate=false
        
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/backend --timeout=300s 