name: Frontend Continuous Deployment

on:
  push:
    branches: [ main, master ]
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend-app
  EKS_CLUSTER_NAME: movie-pipeline-cluster

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './starter/frontend/package-lock.json'
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ./starter/frontend/node_modules
            *!node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './starter/frontend/package-lock.json'
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ./starter/frontend/node_modules
            *!node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test -- --watchAll=false --coverage --passWithNoTests

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    defaults:
      run:
        working-directory: ./starter/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './starter/frontend/package-lock.json'
          
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ./starter/frontend/node_modules
            *!node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test -- --watchAll=false --coverage --passWithNoTests
        
      - name: Build application
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: ./starter/frontend/k8s
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kube config
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
      - name: Set image tag
        run: |
          kustomize edit set image frontend=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
      - name: Deploy to Kubernetes
        run: kustomize build | kubectl apply -f -
        
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend --timeout=300s 